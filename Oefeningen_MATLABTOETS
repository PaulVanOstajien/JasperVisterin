%EX2019
%22/05

%vraag1 

syms i1 i2 i3 
di1=30-(24*i1+6*i2+6*i3) 
di2=(-25/9)*(-18*i1+(6/5)*i2-di1)
di3=-18*i3+(6/5)*i2+(9/25)*di2

clear all

A = sym([-24,-6,-6;-50/3,-20,-50/3;-6,-6,-24])
[P, J] = eig(A)
Q = inv(P)
We voeren een substitutie  uit. Het stelsel wordt daardoor  .
We definiëren de nieuwe onbekende , berekenen , en schrijven de nieuwe vergelijkingen uit:
syms u1(t) u2(t) u3(t)
U = [u1(t); u2(t); u3(t)]
B = [30; 250/3; 30]
BB = Q * B
RL = J * U + BB
De beginvoorwaarden worden omgezet naar  .
U0 = Q * sym([1;1;-2])
We lossen de vergelijkingen één voor één op.
eq1 = diff(u1(t),t) == RL(1)
opl1 = dsolve(eq1, u1(0) == U0(1))
eq2 = diff(u2(t),t) == RL(2)
opl2 = dsolve(eq2, u2(0) == U0(2))
eq3 = diff(u3(t),t) == RL(3)
opl3 = dsolve(eq3, u3(0) == U0(3))
We schrijven de oplossingen van de eerste orde differentiaalvergelijkingen in de vector UU.
UU = [opl1; opl2; opl3]
Nu berekenen we de oplossing van het originele stelsel:  .
P * UU

%Controle: 
Y=P * UU
diff(Y,t)-(A*(Y)+B)
%beginwaarden: 
subs(Y,t,0)-[1;1;-2]


%vraag2 

clear all
syms x y(x) nu
vgl = x^2*diff(y(x),x,2) + x*(x-1)*diff(y(x),x) + 3*y(x)/4 == 0
Deze vergelijking staat in normaalvorm van Frobenius met
q(x) = x - 1
r(x) = sym(3/4)
De indexvergelijking
indexvgl = nu*(nu-1) + q(0)*nu + r(0) == 0
heeft nulpunten
solve(indexvgl, nu)

opl = dsolve(vgl, 'ExpansionPoint', 0, 'Order', 9);
y1 = opl(1)
y2 = expand(opl(2))
opl
collect(y2, log(x))
%A=-1/2

%vraag3
clear all
close all
clc

syms f(x, y, z) x y z lambda1 lambda2

f(x, y, z) = x^2 + y^2 + z^2

% Methode 2: Lagrange
w(x, y, z, lambda1 , lambda2) = f - lambda1*(2*y+4*z-5) - lambda2*(4*x^2 + 4*y^2 - z^2)
grad_w = gradient(w, [x, y, z, lambda1, lambda2])

krit = solve(grad_w == 0, [x, y, z, lambda1, lambda2],"Real",true)

disp([krit.x, krit.y, krit.z, krit.lambda1, krit.lambda2])
lengte=length(krit.x)

for i = 1:lengte
    f0=(vpa(subs(f, [x, y, z], [krit.x(i), krit.y(i), krit.z(i)])))
    x=vpa(krit.x(i))
    y=vpa(krit.y(i))
end
f0=x^2+y^2+2.777777

%vraag4
clear all
syms R u v
Sigma = [u*cos(v), u*sin(v), sqrt(1-u^2*(cos(v))^2)]
%We berekenen de normaalvector.
Alpha = diff(Sigma, u)
Beta  = diff(Sigma, v)
n     = simplify(cross(Alpha, Beta))
%De lengte van de normaalvector moet geïntegreerd worden over een rechthoek. We gebruiken herhaalde enkelvoudige integratie om de dubbele integraal te berekenen.
assume(u, 'real')
assume(v > 0)
integrand = simplify(norm(n))
oppervlakte = int(int(integrand, u, [0, 1]), v, [0, 2*pi])
vpaintegral(int(integrand, u, [0, 1]), v, [0, 2*pi])

syms z theta rho
fsurf(Sigma(1), Sigma(2), Sigma(3), [0, 2*pi, 0, 1])
%We berekenen de massa van het deel S van de kegel.
massa = int(int(rho*integrand, u, [0, 1]), v, [0, 2*pi])
%Om symmetrieredenen zijn de x-coördinaat en de y-coördinaat van het massacentrum 0. De z-coördinaat vinden we als volgt.
centrum = int(int(Sigma(3) * rho*integrand, u, [0, 1]), v, [0, 2*pi]) / massa

%22/05 VM V_2
%vraag1
clear all

A = sym([-1/5, 1/10;1/5, -3/10])
%We berekenen de Jordan kanonieke vorm van A en de bijhorende matrix P:
[P,J] = eig(A)

Y1=P(:,1)*exp(J(1,1)*t)
Y2=P(:,2)*exp(J(2,2)*t)

%We voegen deze twee oplossingen bij elkaar in de matrixoplossing Z en berekenen Z(0).
Z = [Y1, Y2]
Z0 = subs(Z, t, 0)

eAt = Z * inv(Z0)

%!! Ter controle
expm(A*t)
eAt-expm(A*t)
%ok

%We berekenen de oplossing als  (methode: aanpassing van variatie van constanten).
B = [4;10]
%De integrand wordt:
syms xi
integrand = subs(eAt, t, -xi) * subs(B, t, xi)

%We berekenen de integraal
integraal = int(integrand, xi, 0, t)

%We tellen de beginvoorwaarde er bij op en vermenigvuldigen dan met  .
Y0 = [20;5]
Yp = eAt * (integraal + Y0)
Yp = simplify(Yp)

%controle: 
diff(Yp,t,1)-A*Yp-B
subs(Yp,t,0)-Y0
%ok

subs(Yp,t,2)
vpa(subs(Yp,t,2))
%hoeveelheid na 2 min 

subs(Yp,t,60)
vpa(subs(Yp,t,60))
%hoeveelheid na uur 

%vraag2
clear all
syms x y(x) nu
vgl = diff(y(x),x,2) + diff(y(x),x) -(3/(4*x^2))*y(x) == 0
%Deze vergelijking staat niet in normaalvorm van Frobenius. De normaalvorm is
frobenius = x^2*diff(y(x),x,2) + x^2*diff(y(x),x) -(3/4)*y(x) == 0
met 
q(x)= x
r(x) = -3/4 + 0*x
%De indexvergelijking
indexvgl = nu*(nu-1) + q(0)*nu + r(0) == 0
%heeft nulpunten
solve(indexvgl, nu)

%De verwachte oplossingen zijn een machtreeks  en een tweede oplossing die bestaat uit een machtreeks (waarin geen constante term voorkomt) waar  bij opgeteld wordt. We berekenen de oplossing.
opl = dsolve(vgl, 'ExpansionPoint', 0, 'Order', 15)
%In de tweede oplossing ordenen we de termen volgens .
sym((opl(1)))
%factor: x^3/2 in vgl met C_k
%We herkennen hierin de oplossing  (vermenigvuldigd met ), en een andere machtreeks zonder constante term.
collect(opl(2),log(x))
%log(x) in vgl 
%factor: x^-1/2 in vgl met B_k
%A=-1/4

%vraag3
syms x y 
fimplicit(x^2 + 9*y^2 - 9, [-5, 5, -5, 5])
hold on 
fimplicit(x+5*y-10, [-5, 5, -5, 5])
axis equal % gelijke schaling van de x- en y-as
hold off 

clear all 
syms x1 x2 y1 y2 lambda1 lambda2


% Methode 2: Lagrange
d_kwadr=(x1-x2)^2+(y1-y2)^2
w(x1, y1, x2, y2, lambda1, lambda2) =d_kwadr  - lambda1*(x1^2 + 9*y1^2 - 9) - lambda2*(x2+5*y2-10)
grad_w = gradient(w, [x1, y1, x2, y2, lambda1, lambda2])

krit = solve(grad_w == 0, [x1, y1, x2, y2, lambda1, lambda2],"Real",true)

disp([krit.x1, krit.y1, krit.x2, krit.y2, krit.lambda1, krit.lambda2])

number=length(krit.x1)
for i = 1:number
    sqrt(vpa(subs(d_kwadr, [x1, y1, x2, y2], [krit.x1(i), krit.y1(i), krit.x2(i), krit.y2(i)])))
    sqrt(subs(d_kwadr, [x1, y1, x2, y2], [krit.x1(i), krit.y1(i), krit.x2(i), krit.y2(i)]))
    %afstand is gekwadrateerd 
end
%minimale afstand d(x1,y1,x2,y2) = 0.82 met [x1, y1, x2, y2] = [krit.x1(1), krit.y1(1), krit.x2(1), krit.y2(1)]

%vraag4
clear all
syms u t x y z
Sigma = [u*cos(t), u*sin(t), sqrt(1-u^2*cos(2*t))]
f(x,y,z) = z*sqrt(x^2+y^2+z^2)
We berekenen de normaalvector.
Alpha = diff(Sigma, t)
Beta  = diff(Sigma, u)
n     = -simplify(cross(Alpha, Beta))
%minteken omdat normaal naar buiten moet wijzen 

De integrand vinden we nu als het product van de functie, uitgerekend langs het oppervlak, met de lengte van de normaalvector.
assume(t, 'real')
assume(u, 'real')
norm_n(t,u)     = simplify(expand(norm(n)))

f_na_Sigma(t,u) = f(Sigma(1), Sigma(2), Sigma(3))
f_na_Sigma(t,u)=simplify(expand(f_na_Sigma(t,u)))

int_f = int(int(f_na_Sigma(t,u) * norm_n(t,u), u, [0,1]), t, [0,2*pi])
int_f_num1 = vpa(int_f)

int_f_num2= vpaintegral(vpaintegral(f_na_Sigma(t,u) * norm_n(t,u), u, [0,1]), t, [0,2*pi])

%NM V_1
%vraag1
clear all

A = sym([0,1,0,0;-5,0,4,0;0,0,0,1;2,0,2,0])
We berekenen de Jordan kanonieke vorm van A en de bijhorende matrix P:
[P,J] = eig(A)

De matrix A heeft complex toegevoegde eigenwaarden.
We selecteren het reëel en het imaginair deel van de eerste eigenwaarde.
alpha = real(J(1, 1))
beta = imag(J(1, 1))
De eigenvectoren zijn ook complex toegevoegd.
We schrijven de eigenvectoren als  en .
G = real(P(:,1))
H = imag(P(:,1))
syms t
Y1 = exp(alpha*t) * (cos(beta*t) * G - sin(beta*t) * H)
Y2 = exp(alpha*t) * (cos(beta*t) * H + sin(beta*t) * G)
Y3 = P(:,3)*exp(J(3,3)*t)
Y4 = P(:,4)*exp(J(4,4)*t)
We voegen deze twee oplossingen bij elkaar in de matrixoplossing Z en berekenen Z(0).
Z = [Y1, Y2, Y3, Y4]
Z0 = subs(Z, t, 0)
Dan is  .
eAt = Z * inv(Z0)

!! Ter controle
expm geeft een complex antwoord
expm(A*t)
Met de veronderstelling dat t reeel is, krijgen we wel het verwachte antwoord.
assume(t, 'real')
expm(A*t)
eAt-expm(A*t)
%ok
We tellen de beginvoorwaarde er bij op en vermenigvuldigen dan met  .
Y0 = [2;0;0;1]
Yp = eAt * (Y0)
Yp = simplify(Yp)

%controle: 
diff(Yp,t,1)-A*Yp
subs(Yp,t,0)-Y0
%ok

%vraag2
clear all
syms x y(x) nu
vgl = (x+1)*diff(y(x),x,2) - (1/x)*diff(y(x),x) + y(x) == 0
Deze vergelijking staat niet in normaalvorm van Frobenius. De normaalvorm is
frobenius = x^2*diff(y(x),x,2) - (x/(x+1))*diff(y(x),x) + (x^2/(x+1))*y(x) == 0
met 
q(x)= -1/(x+1)
r(x) = (x^2/(x+1))
De indexvergelijking
indexvgl = nu*(nu-1) + q(0)*nu + r(0) == 0
heeft nulpunten
solve(indexvgl, nu)

De verwachte oplossingen zijn een machtreeks  en een tweede oplossing die bestaat uit een machtreeks (waarin geen constante term voorkomt) waar  bij opgeteld wordt. We berekenen de oplossing.
opl = dsolve(vgl, 'ExpansionPoint', 0, 'Order', 15)
In de tweede oplossing ordenen we de termen volgens .
sym((opl(1)))
%factor: 1 in vgl met C_k
We herkennen hierin de oplossing  (vermenigvuldigd met ), en een andere machtreeks zonder constante term.
collect(opl(2),log(x))
%factor log(x) A=1

%vraag3
clear all

syms x y
f(x,y) = (x^2 + y^2-1)*(x^2+9*y^2-9)
We berekenen de kritische punten door de partiële afgeleiden nul te stellen. De partiële afgeleiden zijn de componenten van de gradiënt van de functie en kunnen berekend worden met  gradient .
gradf = gradient(f(x,y), [x, y])
kritisch = solve(gradf, [x, y])
disp([kritisch.x, kritisch.y])

aantal = length(kritisch.x)
De determinant van de Hessiaanmatrix wordt gegeven door:
delta = det(hessian(f(x,y), [x, y]))
We definiëren de tweede afgeleide van f naar x:
fxx = diff(f(x,y),x,2)
Voor elk kritisch punt   berekenen en tonen we de functiewaarde   , de determinant van de Hessiaanmatrix   en :  
for i = 1 : aantal
    p0 = [kritisch.x(i), kritisch.y(i)];
    p0
    f0 = f(kritisch.x(i), kritisch.y(i));
    f0
    Delta = subs(delta, {x, y}, {kritisch.x(i), kritisch.y(i)});
    Delta
    f2 = subs(fxx, {x, y}, {kritisch.x(i), kritisch.y(i)});
    f2
    disp('______________')
end

%(0,0) is een maximum 
%(+- sqrt(5),0) is een minimum 
%voor (0,-1) nader onderzoek 

We beschouwen een rechthoek  [a, b] x [c, d] die de kritische punten bevat:
a = -4; b = 4; c = -4; d = 4;
Nu tekenen we niveaulijnen van de functie (een aantal willekeurige om een globaal beeld te krijgen, en ook specifieke door de kritische punten). We gebruiken hievoor het commando fcontour. De kritische punten worden weergegeven met scatter.
figure
set(gca, 'XAxisLocation', 'origin', 'YAxisLocation', 'origin')
hold on
fcontour(f, [a, b, c, d], 'LevelList', [-2:8, 10:2:20], 'LineColor', 'b')
fcontour(f, [a, b, c, d], 'LevelList', [subs(f, {x, y}, {kritisch.x(1), kritisch.y(1)}), ...
    subs(f, {x, y}, {kritisch.x(5), kritisch.y(5)})], 'LineColor', 'r')
scatter([0],[-1], 'fill', 'MarkerFaceColor', 'k')
hold off
%(0,-1) is een zadelpunt 

clear all

syms x y
f(x,y) = (x^2 + y^2-1)*(x^2+9*y^2-9)
g(x,y) = x+1-y

syms lambda
W = f(x,y) - lambda * (g(x,y))
gradW = gradient(W, [x, y, lambda])
kritisch = solve(gradW,"Real",true)
disp([kritisch.x, kritisch.y, kritisch.lambda])
aantal = length(kritisch.x)

We vinden 5 kritische punten van  W . Van elk gevonden punt zoeken we de overeenkomstige functiewaarde . In elk punt berekenen we ook Δ en de tweede afgeleide van  naar  x . Alleen als λ = 0 (dan wordt eigenlijk geen rekening gehouden met de beperking) gebruiken we die resultaten om te weten over welk soort kritisch punt het gaat.
delta = det(hessian(f(x,y), [x,y]))
fxx = diff(f(x,y), x, 2)
for i = 1 : aantal
    p0 = [kritisch.x(i), kritisch.y(i), kritisch.lambda(i)];
    p0
    f0 = f(kritisch.x(i), kritisch.y(i));
    f0
    Delta = subs(delta, {x, y}, {kritisch.x(i), kritisch.y(i)});
    Delta
    f2 = subs(fxx, {x, y}, {kritisch.x(i), kritisch.y(i)});
    f2
    disp('___________________________')
end

% f(-3/5, 2/5) = 432/125 MAX
% f(-3/2,-1/2) = -27/4 MIN

We beschouwen een rechthoek  [a, b] x [c, d] die de kritische punten bevat:
a = -4; b = 4; c = -4; d = 4;
Nu tekenen we niveaulijnen van de functie (een aantal willekeurige om een globaal beeld te krijgen, en ook specifieke door de kritische punten). We gebruiken hievoor het commando fcontour. De kritische punten worden weergegeven met scatter.
figure
set(gca, 'XAxisLocation', 'origin', 'YAxisLocation', 'origin')
hold on
fcontour(f, [a, b, c, d], 'LevelList', [-2:8, 10:2:20], 'LineColor', 'b')
fcontour(f, [a, b, c, d], 'LevelList', [subs(f, {x, y}, {kritisch.x(1), kritisch.y(1)}), ...
    subs(f, {x, y}, {kritisch.x(2), kritisch.y(2)})], 'LineColor', 'r')
fcontour(g, [a, b, c, d], 'LevelList', [-2:8, 10:2:20], 'LineColor', 'b')
scatter(kritisch.x, kritisch.y, 'fill', 'MarkerFaceColor', 'k')
hold off

%vraag4
clear all
syms u t x y z
Sigma = [u*cos(t), u*sin(t), 1-u^2]
f(x,y,z) = 1+x^2+y^2
We berekenen de normaalvector.
Alpha = diff(Sigma, t)
Beta  = diff(Sigma, u)
n     = -simplify(cross(Alpha, Beta))
%minteken omdat normaal naar buiten moet wijzen 

De integrand vinden we nu als het product van de functie, uitgerekend langs het oppervlak, met de lengte van de normaalvector.
assume(t, 'real')
assume(u, 'real')
norm_n(t,u)     = simplify(expand(norm(n)))

f_na_Sigma(t,u) = f(Sigma(1), Sigma(2), Sigma(3))
f_na_Sigma(t,u)=simplify(expand(f_na_Sigma(t,u)))

int_f = int(int(f_na_Sigma(t,u) * norm_n(t,u), u, [0,1]), t, [0,pi/2])
int_f_num1 = vpa(int_f)

int_f_num2= vpaintegral(vpaintegral(f_na_Sigma(t,u) * norm_n(t,u), u, [0,1]), t, [0,pi/2])

%NM V_2
%vraag1 
clear all

A = sym([0,1,0,0;-4,0,3,0;0,0,0,1;3,0,-4,0])
[P, J] = eig(A)

De matrix A heeft complex toegevoegde eigenwaarden.
We selecteren het reëel en het imaginair deel van de eerste eigenwaarde.
alpha_1 = real(J(1, 1))
beta_1 = imag(J(1, 1))

alpha_2 = real(J(3,3))
beta_2 = imag(J(3,3))
De eigenvectoren zijn ook complex toegevoegd.
We schrijven de eigenvectoren als  en .
G_1 = real(P(:,1))
H_1 = imag(P(:,1))

G_2 = real(P(:,3))
H_2 = imag(P(:,3))
Dan zijn  en  twee lineair onafhankelijke (basis)oplossingen van het stelsel.
syms t
Y1 = exp(alpha_1*t) * (cos(beta_1*t) * G_1 - sin(beta_1*t) * H_1)
Y2 = exp(alpha_1*t) * (cos(beta_1*t) * H_1 + sin(beta_1*t) * G_1)
Y3 = exp(alpha_2*t) * (cos(beta_2*t) * G_2 - sin(beta_2*t) * H_2)
Y4 = exp(alpha_2*t) * (cos(beta_2*t) * H_2 + sin(beta_2*t) * G_2)
We voegen deze twee oplossingen bij elkaar in de matrixoplossing Z en berekenen Z(0).
Z = [Y1, Y2, Y3, Y4]
Z0 = subs(Z, t, 0)
Dan is  .
eAt = Z * inv(Z0)

!! Ter controle
expm geeft een complex antwoord
expm(A*t)
Met de veronderstelling dat t reeel is, krijgen we wel het verwachte antwoord.
assume(t, 'real')
expmatrix=expm(A*t)

eAt-expmatrix
We berekenen de oplossing als  (methode: aanpassing van variatie van constanten).
B = [0;-5;0;9]
De integrand wordt:
syms xi
integrand = subs(eAt, t, -xi) * subs(B, t, xi)
We berekenen de integraal
integraal = int(integrand, xi, 0, t)
We tellen de beginvoorwaarde er bij op en vermenigvuldigen dan met  .
Y0 = [1/2;0;7/2;0]
Yp = eAt * (integraal + Y0)
Yp = simplify(Yp)

%Controle: 
Y=Yp
diff(Y,t)-(A*(Y)+B)
%beginwaarden: 
subs(Y,t,0)-[1/2;0;7/2;0]
%ok

%c 
subs(Y(1,:),t,1)
%x1
subs(Y(3,:),t,1)
%x2

%vraag2
clear all
syms x y(x) nu
vgl = x*diff(y(x),x,2) + diff(y(x),x) + (x+1-1/(4*x))*y(x) == 0
Deze vergelijking staat niet in normaalvorm van Frobenius. De normaalvorm is
frobenius = x^2*diff(y(x),x,2) +x*diff(y(x),x) + (x^2+x-1/4)*y(x) == 0
met 
q(x)= 1 + 0*x
r(x) = x^2+x-1/4
De indexvergelijking
indexvgl = nu*(nu-1) + q(0)*nu + r(0) == 0
heeft nulpunten
solve(indexvgl, nu)

De verwachte oplossingen zijn een machtreeks  en een tweede oplossing die bestaat uit een machtreeks (waarin geen constante term voorkomt) waar  bij opgeteld wordt. We berekenen de oplossing.
opl = dsolve(vgl, 'ExpansionPoint', 0, 'Order', 15)
In de tweede oplossing ordenen we de termen volgens .
sym((opl(1)))
%factor: x^1/2 in vgl met C_k
We herkennen hierin de oplossing  (vermenigvuldigd met ), en een andere machtreeks zonder constante term.
collect(opl(2),log(x))
%factor log(x)  A=-1

%vraag 3 
clear all

syms x y
f(x,y) = (x^2 + y^2-3)*(x+1)
We berekenen de kritische punten door de partiële afgeleiden nul te stellen. De partiële afgeleiden zijn de componenten van de gradiënt van de functie en kunnen berekend worden met  gradient .
gradf = gradient(f(x,y), [x, y])
kritisch = solve(gradf, [x, y])
disp([kritisch.x, kritisch.y])

aantal = length(kritisch.x)
De determinant van de Hessiaanmatrix wordt gegeven door:
delta = det(hessian(f(x,y), [x, y]))
We definiëren de tweede afgeleide van f naar x:
fxx = diff(f(x,y),x,2)
Voor elk kritisch punt   berekenen en tonen we de functiewaarde   , de determinant van de Hessiaanmatrix   en :  
for i = 1 : aantal
    p0 = [kritisch.x(i), kritisch.y(i)];
    p0
    f0 = f(kritisch.x(i), kritisch.y(i));
    f0
    vpa(f0)
    Delta = subs(delta, {x, y}, {kritisch.x(i), kritisch.y(i)});
    Delta
    vpa(Delta)
    f2 = subs(fxx, {x, y}, {kritisch.x(i), kritisch.y(i)});
    f2
    disp('______________')
end

%(-sqrt(10)/3 - 1/3, 0) is een maximum 
%(sqrt(10)/3 - 1/3, 0) is een minimum
%(-1, +- sqrt(2) ) is een zadelpunt 

We beschouwen een rechthoek  [a, b] x [c, d] die de kritische punten bevat:
a = -4; b = 4; c = -4; d = 4;
Nu tekenen we niveaulijnen van de functie (een aantal willekeurige om een globaal beeld te krijgen, en ook specifieke door de kritische punten). We gebruiken hievoor het commando fcontour. De kritische punten worden weergegeven met scatter.
figure
set(gca, 'XAxisLocation', 'origin', 'YAxisLocation', 'origin')
hold on
fcontour(f, [a, b, c, d], 'LevelList', [-2:8, 10:2:20], 'LineColor', 'b')
fcontour(f, [a, b, c, d], 'LevelList', [subs(f, {x, y}, {kritisch.x(1), kritisch.y(1)}), ...
    subs(f, {x, y}, {kritisch.x(4), kritisch.y(4)})], 'LineColor', 'r')
scatter(kritisch.x,kritisch.y, 'fill', 'MarkerFaceColor', 'k')
hold off

clear all

syms x y
f(x,y) = (x^2 + y^2-3)*(x+1)
g(x,y) = x+2-2*y

syms lambda
W = f(x,y) - lambda * (g(x,y))
gradW = gradient(W, [x, y, lambda])
kritisch = solve(gradW,"Real",true)
disp([kritisch.x, kritisch.y, kritisch.lambda])
aantal = length(kritisch.x)

We vinden 2 kritische punten van  W . Van elk gevonden punt zoeken we de overeenkomstige functiewaarde . In elk punt berekenen we ook Δ en de tweede afgeleide van  naar  x . Alleen als λ = 0 (dan wordt eigenlijk geen rekening gehouden met de beperking) gebruiken we die resultaten om te weten over welk soort kritisch punt het gaat.
delta = det(hessian(f(x,y), [x,y]))
fxx = diff(f(x,y), x, 2)
for i = 1 : aantal
    p0 = [kritisch.x(i), kritisch.y(i), kritisch.lambda(i)];
    p0
    simplify(expand(p0))
    f0 = f(kritisch.x(i), kritisch.y(i));
    f0
    simplify(expand(f0))
    vpa(f0)
    Delta = subs(delta, {x, y}, {kritisch.x(i), kritisch.y(i)});
    Delta
    f2 = subs(fxx, {x, y}, {kritisch.x(i), kritisch.y(i)});
    f2
    disp('___________________________')
end

% f( - sqrt(sym(141))/15 - sym(3/5), sym(7/10) - sqrt(sym(141))/30) =  +(47*sqrt(sym(141)))/450 - sym(43/50) MAX
% f(sqrt(sym(141))/15 - sym(3/5),sqrt(sym(141))/30 + sym(7/10)) = -(47*sqrt(sym(141)))/450 - sym(43/50) MIN

We beschouwen een rechthoek  [a, b] x [c, d] die de kritische punten bevat:
a = -4; b = 4; c = -4; d = 4;
Nu tekenen we niveaulijnen van de functie (een aantal willekeurige om een globaal beeld te krijgen, en ook specifieke door de kritische punten). We gebruiken hievoor het commando fcontour. De kritische punten worden weergegeven met scatter.
figure
set(gca, 'XAxisLocation', 'origin', 'YAxisLocation', 'origin')
hold on
fcontour(f, [a, b, c, d], 'LevelList', [-2:8, 10:2:20], 'LineColor', 'b')
fcontour(f, [a, b, c, d], 'LevelList', [subs(f, {x, y}, {kritisch.x(1), kritisch.y(1)}), ...
    subs(f, {x, y}, {kritisch.x(2), kritisch.y(2)})], 'LineColor', 'r')
fcontour(g, [a, b, c, d], 'LevelList', [-2:8, 10:2:20], 'LineColor', 'b')
scatter(kritisch.x, kritisch.y, 'fill', 'MarkerFaceColor', 'k')
hold off

%vraag4 
clear all
syms u t x y z
Sigma = [u*cos(t), u*sin(t), sqrt(u^2-16)]
f(x,y,z) = 1/sqrt(x^2+y^2-8)
We berekenen de normaalvector.
Alpha = diff(Sigma, t)
Beta  = diff(Sigma, u)
n     = -simplify(cross(Alpha, Beta))
%minteken omdat normaal naar buiten moet wijzen 

De integrand vinden we nu als het product van de functie, uitgerekend langs het oppervlak, met de lengte van de normaalvector.
assume(t, 'real')
assume(u, 'real')
norm_n(t,u)     = simplify(expand(norm(n)))

f_na_Sigma(t,u) = f(Sigma(1), Sigma(2), Sigma(3))
f_na_Sigma(t,u)=simplify(expand(f_na_Sigma(t,u)))

int_f = int(int(f_na_Sigma(t,u) * norm_n(t,u), u, [4,5]), t, [0,pi/2])
int_f_num1 = vpa(int_f)

int_f_num2= vpaintegral(vpaintegral(f_na_Sigma(t,u) * norm_n(t,u), u, [4,5]), t, [0,pi/2])
